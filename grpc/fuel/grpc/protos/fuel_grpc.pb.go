// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0--rc2
// source: grpc/fuel/grpc/protos/fuel.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FuelService_GetCurrentStock_FullMethodName       = "/fuel.FuelService/GetCurrentStock"
	FuelService_AddFuel_FullMethodName               = "/fuel.FuelService/AddFuel"
	FuelService_ConsumeFuel_FullMethodName           = "/fuel.FuelService/ConsumeFuel"
	FuelService_GetTransactionHistory_FullMethodName = "/fuel.FuelService/GetTransactionHistory"
	FuelService_CheckAvailability_FullMethodName     = "/fuel.FuelService/CheckAvailability"
)

// FuelServiceClient is the client API for FuelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuelServiceClient interface {
	GetCurrentStock(ctx context.Context, in *GetCurrentStockRequest, opts ...grpc.CallOption) (*GetCurrentStockResponse, error)
	AddFuel(ctx context.Context, in *AddFuelRequest, opts ...grpc.CallOption) (*AddFuelResponse, error)
	ConsumeFuel(ctx context.Context, in *ConsumeFuelRequest, opts ...grpc.CallOption) (*ConsumeFuelResponse, error)
	GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error)
	CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error)
}

type fuelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFuelServiceClient(cc grpc.ClientConnInterface) FuelServiceClient {
	return &fuelServiceClient{cc}
}

func (c *fuelServiceClient) GetCurrentStock(ctx context.Context, in *GetCurrentStockRequest, opts ...grpc.CallOption) (*GetCurrentStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentStockResponse)
	err := c.cc.Invoke(ctx, FuelService_GetCurrentStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) AddFuel(ctx context.Context, in *AddFuelRequest, opts ...grpc.CallOption) (*AddFuelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFuelResponse)
	err := c.cc.Invoke(ctx, FuelService_AddFuel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) ConsumeFuel(ctx context.Context, in *ConsumeFuelRequest, opts ...grpc.CallOption) (*ConsumeFuelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumeFuelResponse)
	err := c.cc.Invoke(ctx, FuelService_ConsumeFuel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionHistoryResponse)
	err := c.cc.Invoke(ctx, FuelService_GetTransactionHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAvailabilityResponse)
	err := c.cc.Invoke(ctx, FuelService_CheckAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuelServiceServer is the server API for FuelService service.
// All implementations must embed UnimplementedFuelServiceServer
// for forward compatibility.
type FuelServiceServer interface {
	GetCurrentStock(context.Context, *GetCurrentStockRequest) (*GetCurrentStockResponse, error)
	AddFuel(context.Context, *AddFuelRequest) (*AddFuelResponse, error)
	ConsumeFuel(context.Context, *ConsumeFuelRequest) (*ConsumeFuelResponse, error)
	GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error)
	CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error)
	mustEmbedUnimplementedFuelServiceServer()
}

// UnimplementedFuelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFuelServiceServer struct{}

func (UnimplementedFuelServiceServer) GetCurrentStock(context.Context, *GetCurrentStockRequest) (*GetCurrentStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentStock not implemented")
}
func (UnimplementedFuelServiceServer) AddFuel(context.Context, *AddFuelRequest) (*AddFuelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFuel not implemented")
}
func (UnimplementedFuelServiceServer) ConsumeFuel(context.Context, *ConsumeFuelRequest) (*ConsumeFuelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeFuel not implemented")
}
func (UnimplementedFuelServiceServer) GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionHistory not implemented")
}
func (UnimplementedFuelServiceServer) CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailability not implemented")
}
func (UnimplementedFuelServiceServer) mustEmbedUnimplementedFuelServiceServer() {}
func (UnimplementedFuelServiceServer) testEmbeddedByValue()                     {}

// UnsafeFuelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuelServiceServer will
// result in compilation errors.
type UnsafeFuelServiceServer interface {
	mustEmbedUnimplementedFuelServiceServer()
}

func RegisterFuelServiceServer(s grpc.ServiceRegistrar, srv FuelServiceServer) {
	// If the following call pancis, it indicates UnimplementedFuelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FuelService_ServiceDesc, srv)
}

func _FuelService_GetCurrentStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).GetCurrentStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_GetCurrentStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).GetCurrentStock(ctx, req.(*GetCurrentStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_AddFuel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFuelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).AddFuel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_AddFuel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).AddFuel(ctx, req.(*AddFuelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_ConsumeFuel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeFuelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).ConsumeFuel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_ConsumeFuel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).ConsumeFuel(ctx, req.(*ConsumeFuelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_GetTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).GetTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_GetTransactionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).GetTransactionHistory(ctx, req.(*GetTransactionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).CheckAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_CheckAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).CheckAvailability(ctx, req.(*CheckAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FuelService_ServiceDesc is the grpc.ServiceDesc for FuelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FuelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fuel.FuelService",
	HandlerType: (*FuelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentStock",
			Handler:    _FuelService_GetCurrentStock_Handler,
		},
		{
			MethodName: "AddFuel",
			Handler:    _FuelService_AddFuel_Handler,
		},
		{
			MethodName: "ConsumeFuel",
			Handler:    _FuelService_ConsumeFuel_Handler,
		},
		{
			MethodName: "GetTransactionHistory",
			Handler:    _FuelService_GetTransactionHistory_Handler,
		},
		{
			MethodName: "CheckAvailability",
			Handler:    _FuelService_CheckAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/fuel/grpc/protos/fuel.proto",
}
