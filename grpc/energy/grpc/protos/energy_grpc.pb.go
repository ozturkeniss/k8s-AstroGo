// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0--rc2
// source: grpc/protos/energy.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnergyService_GetCurrentStock_FullMethodName       = "/energy.EnergyService/GetCurrentStock"
	EnergyService_AddEnergy_FullMethodName             = "/energy.EnergyService/AddEnergy"
	EnergyService_ConsumeEnergy_FullMethodName         = "/energy.EnergyService/ConsumeEnergy"
	EnergyService_GetTransactionHistory_FullMethodName = "/energy.EnergyService/GetTransactionHistory"
	EnergyService_CheckAvailability_FullMethodName     = "/energy.EnergyService/CheckAvailability"
)

// EnergyServiceClient is the client API for EnergyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Energy service definition
type EnergyServiceClient interface {
	GetCurrentStock(ctx context.Context, in *GetCurrentStockRequest, opts ...grpc.CallOption) (*GetCurrentStockResponse, error)
	AddEnergy(ctx context.Context, in *AddEnergyRequest, opts ...grpc.CallOption) (*AddEnergyResponse, error)
	ConsumeEnergy(ctx context.Context, in *ConsumeEnergyRequest, opts ...grpc.CallOption) (*ConsumeEnergyResponse, error)
	GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error)
	CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error)
}

type energyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnergyServiceClient(cc grpc.ClientConnInterface) EnergyServiceClient {
	return &energyServiceClient{cc}
}

func (c *energyServiceClient) GetCurrentStock(ctx context.Context, in *GetCurrentStockRequest, opts ...grpc.CallOption) (*GetCurrentStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentStockResponse)
	err := c.cc.Invoke(ctx, EnergyService_GetCurrentStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) AddEnergy(ctx context.Context, in *AddEnergyRequest, opts ...grpc.CallOption) (*AddEnergyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddEnergyResponse)
	err := c.cc.Invoke(ctx, EnergyService_AddEnergy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) ConsumeEnergy(ctx context.Context, in *ConsumeEnergyRequest, opts ...grpc.CallOption) (*ConsumeEnergyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumeEnergyResponse)
	err := c.cc.Invoke(ctx, EnergyService_ConsumeEnergy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionHistoryResponse)
	err := c.cc.Invoke(ctx, EnergyService_GetTransactionHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAvailabilityResponse)
	err := c.cc.Invoke(ctx, EnergyService_CheckAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnergyServiceServer is the server API for EnergyService service.
// All implementations must embed UnimplementedEnergyServiceServer
// for forward compatibility.
//
// Energy service definition
type EnergyServiceServer interface {
	GetCurrentStock(context.Context, *GetCurrentStockRequest) (*GetCurrentStockResponse, error)
	AddEnergy(context.Context, *AddEnergyRequest) (*AddEnergyResponse, error)
	ConsumeEnergy(context.Context, *ConsumeEnergyRequest) (*ConsumeEnergyResponse, error)
	GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error)
	CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error)
	mustEmbedUnimplementedEnergyServiceServer()
}

// UnimplementedEnergyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnergyServiceServer struct{}

func (UnimplementedEnergyServiceServer) GetCurrentStock(context.Context, *GetCurrentStockRequest) (*GetCurrentStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentStock not implemented")
}
func (UnimplementedEnergyServiceServer) AddEnergy(context.Context, *AddEnergyRequest) (*AddEnergyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEnergy not implemented")
}
func (UnimplementedEnergyServiceServer) ConsumeEnergy(context.Context, *ConsumeEnergyRequest) (*ConsumeEnergyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeEnergy not implemented")
}
func (UnimplementedEnergyServiceServer) GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionHistory not implemented")
}
func (UnimplementedEnergyServiceServer) CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailability not implemented")
}
func (UnimplementedEnergyServiceServer) mustEmbedUnimplementedEnergyServiceServer() {}
func (UnimplementedEnergyServiceServer) testEmbeddedByValue()                       {}

// UnsafeEnergyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnergyServiceServer will
// result in compilation errors.
type UnsafeEnergyServiceServer interface {
	mustEmbedUnimplementedEnergyServiceServer()
}

func RegisterEnergyServiceServer(s grpc.ServiceRegistrar, srv EnergyServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnergyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnergyService_ServiceDesc, srv)
}

func _EnergyService_GetCurrentStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).GetCurrentStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnergyService_GetCurrentStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).GetCurrentStock(ctx, req.(*GetCurrentStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_AddEnergy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEnergyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).AddEnergy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnergyService_AddEnergy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).AddEnergy(ctx, req.(*AddEnergyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_ConsumeEnergy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeEnergyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).ConsumeEnergy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnergyService_ConsumeEnergy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).ConsumeEnergy(ctx, req.(*ConsumeEnergyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_GetTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).GetTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnergyService_GetTransactionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).GetTransactionHistory(ctx, req.(*GetTransactionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).CheckAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnergyService_CheckAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).CheckAvailability(ctx, req.(*CheckAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnergyService_ServiceDesc is the grpc.ServiceDesc for EnergyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnergyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "energy.EnergyService",
	HandlerType: (*EnergyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentStock",
			Handler:    _EnergyService_GetCurrentStock_Handler,
		},
		{
			MethodName: "AddEnergy",
			Handler:    _EnergyService_AddEnergy_Handler,
		},
		{
			MethodName: "ConsumeEnergy",
			Handler:    _EnergyService_ConsumeEnergy_Handler,
		},
		{
			MethodName: "GetTransactionHistory",
			Handler:    _EnergyService_GetTransactionHistory_Handler,
		},
		{
			MethodName: "CheckAvailability",
			Handler:    _EnergyService_CheckAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/protos/energy.proto",
}
