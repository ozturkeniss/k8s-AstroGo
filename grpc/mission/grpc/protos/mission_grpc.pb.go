// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0--rc2
// source: grpc/protos/mission.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MissionService_CreateMission_FullMethodName   = "/mission.MissionService/CreateMission"
	MissionService_GetMission_FullMethodName      = "/mission.MissionService/GetMission"
	MissionService_ListMissions_FullMethodName    = "/mission.MissionService/ListMissions"
	MissionService_StartMission_FullMethodName    = "/mission.MissionService/StartMission"
	MissionService_CompleteMission_FullMethodName = "/mission.MissionService/CompleteMission"
	MissionService_FailMission_FullMethodName     = "/mission.MissionService/FailMission"
	MissionService_AssignAstronaut_FullMethodName = "/mission.MissionService/AssignAstronaut"
)

// MissionServiceClient is the client API for MissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Mission service definition
type MissionServiceClient interface {
	CreateMission(ctx context.Context, in *CreateMissionRequest, opts ...grpc.CallOption) (*CreateMissionResponse, error)
	GetMission(ctx context.Context, in *GetMissionRequest, opts ...grpc.CallOption) (*GetMissionResponse, error)
	ListMissions(ctx context.Context, in *ListMissionsRequest, opts ...grpc.CallOption) (*ListMissionsResponse, error)
	StartMission(ctx context.Context, in *StartMissionRequest, opts ...grpc.CallOption) (*StartMissionResponse, error)
	CompleteMission(ctx context.Context, in *CompleteMissionRequest, opts ...grpc.CallOption) (*CompleteMissionResponse, error)
	FailMission(ctx context.Context, in *FailMissionRequest, opts ...grpc.CallOption) (*FailMissionResponse, error)
	AssignAstronaut(ctx context.Context, in *AssignAstronautRequest, opts ...grpc.CallOption) (*AssignAstronautResponse, error)
}

type missionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMissionServiceClient(cc grpc.ClientConnInterface) MissionServiceClient {
	return &missionServiceClient{cc}
}

func (c *missionServiceClient) CreateMission(ctx context.Context, in *CreateMissionRequest, opts ...grpc.CallOption) (*CreateMissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMissionResponse)
	err := c.cc.Invoke(ctx, MissionService_CreateMission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) GetMission(ctx context.Context, in *GetMissionRequest, opts ...grpc.CallOption) (*GetMissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMissionResponse)
	err := c.cc.Invoke(ctx, MissionService_GetMission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) ListMissions(ctx context.Context, in *ListMissionsRequest, opts ...grpc.CallOption) (*ListMissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMissionsResponse)
	err := c.cc.Invoke(ctx, MissionService_ListMissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) StartMission(ctx context.Context, in *StartMissionRequest, opts ...grpc.CallOption) (*StartMissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartMissionResponse)
	err := c.cc.Invoke(ctx, MissionService_StartMission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) CompleteMission(ctx context.Context, in *CompleteMissionRequest, opts ...grpc.CallOption) (*CompleteMissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteMissionResponse)
	err := c.cc.Invoke(ctx, MissionService_CompleteMission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) FailMission(ctx context.Context, in *FailMissionRequest, opts ...grpc.CallOption) (*FailMissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FailMissionResponse)
	err := c.cc.Invoke(ctx, MissionService_FailMission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) AssignAstronaut(ctx context.Context, in *AssignAstronautRequest, opts ...grpc.CallOption) (*AssignAstronautResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignAstronautResponse)
	err := c.cc.Invoke(ctx, MissionService_AssignAstronaut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MissionServiceServer is the server API for MissionService service.
// All implementations must embed UnimplementedMissionServiceServer
// for forward compatibility.
//
// Mission service definition
type MissionServiceServer interface {
	CreateMission(context.Context, *CreateMissionRequest) (*CreateMissionResponse, error)
	GetMission(context.Context, *GetMissionRequest) (*GetMissionResponse, error)
	ListMissions(context.Context, *ListMissionsRequest) (*ListMissionsResponse, error)
	StartMission(context.Context, *StartMissionRequest) (*StartMissionResponse, error)
	CompleteMission(context.Context, *CompleteMissionRequest) (*CompleteMissionResponse, error)
	FailMission(context.Context, *FailMissionRequest) (*FailMissionResponse, error)
	AssignAstronaut(context.Context, *AssignAstronautRequest) (*AssignAstronautResponse, error)
	mustEmbedUnimplementedMissionServiceServer()
}

// UnimplementedMissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMissionServiceServer struct{}

func (UnimplementedMissionServiceServer) CreateMission(context.Context, *CreateMissionRequest) (*CreateMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMission not implemented")
}
func (UnimplementedMissionServiceServer) GetMission(context.Context, *GetMissionRequest) (*GetMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMission not implemented")
}
func (UnimplementedMissionServiceServer) ListMissions(context.Context, *ListMissionsRequest) (*ListMissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMissions not implemented")
}
func (UnimplementedMissionServiceServer) StartMission(context.Context, *StartMissionRequest) (*StartMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMission not implemented")
}
func (UnimplementedMissionServiceServer) CompleteMission(context.Context, *CompleteMissionRequest) (*CompleteMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMission not implemented")
}
func (UnimplementedMissionServiceServer) FailMission(context.Context, *FailMissionRequest) (*FailMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailMission not implemented")
}
func (UnimplementedMissionServiceServer) AssignAstronaut(context.Context, *AssignAstronautRequest) (*AssignAstronautResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAstronaut not implemented")
}
func (UnimplementedMissionServiceServer) mustEmbedUnimplementedMissionServiceServer() {}
func (UnimplementedMissionServiceServer) testEmbeddedByValue()                        {}

// UnsafeMissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MissionServiceServer will
// result in compilation errors.
type UnsafeMissionServiceServer interface {
	mustEmbedUnimplementedMissionServiceServer()
}

func RegisterMissionServiceServer(s grpc.ServiceRegistrar, srv MissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedMissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MissionService_ServiceDesc, srv)
}

func _MissionService_CreateMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).CreateMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_CreateMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).CreateMission(ctx, req.(*CreateMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_GetMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).GetMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_GetMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).GetMission(ctx, req.(*GetMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_ListMissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).ListMissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_ListMissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).ListMissions(ctx, req.(*ListMissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_StartMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).StartMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_StartMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).StartMission(ctx, req.(*StartMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_CompleteMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).CompleteMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_CompleteMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).CompleteMission(ctx, req.(*CompleteMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_FailMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).FailMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_FailMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).FailMission(ctx, req.(*FailMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_AssignAstronaut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAstronautRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).AssignAstronaut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_AssignAstronaut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).AssignAstronaut(ctx, req.(*AssignAstronautRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MissionService_ServiceDesc is the grpc.ServiceDesc for MissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mission.MissionService",
	HandlerType: (*MissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMission",
			Handler:    _MissionService_CreateMission_Handler,
		},
		{
			MethodName: "GetMission",
			Handler:    _MissionService_GetMission_Handler,
		},
		{
			MethodName: "ListMissions",
			Handler:    _MissionService_ListMissions_Handler,
		},
		{
			MethodName: "StartMission",
			Handler:    _MissionService_StartMission_Handler,
		},
		{
			MethodName: "CompleteMission",
			Handler:    _MissionService_CompleteMission_Handler,
		},
		{
			MethodName: "FailMission",
			Handler:    _MissionService_FailMission_Handler,
		},
		{
			MethodName: "AssignAstronaut",
			Handler:    _MissionService_AssignAstronaut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/protos/mission.proto",
}
