// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0--rc2
// source: grpc/protos/astronaut.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AstronautService_CreateAstronaut_FullMethodName       = "/astronaut.AstronautService/CreateAstronaut"
	AstronautService_GetAstronaut_FullMethodName          = "/astronaut.AstronautService/GetAstronaut"
	AstronautService_ListAstronauts_FullMethodName        = "/astronaut.AstronautService/ListAstronauts"
	AstronautService_UpdateAstronautStatus_FullMethodName = "/astronaut.AstronautService/UpdateAstronautStatus"
)

// AstronautServiceClient is the client API for AstronautService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Astronaut service definition
type AstronautServiceClient interface {
	CreateAstronaut(ctx context.Context, in *CreateAstronautRequest, opts ...grpc.CallOption) (*CreateAstronautResponse, error)
	GetAstronaut(ctx context.Context, in *GetAstronautRequest, opts ...grpc.CallOption) (*GetAstronautResponse, error)
	ListAstronauts(ctx context.Context, in *ListAstronautsRequest, opts ...grpc.CallOption) (*ListAstronautsResponse, error)
	UpdateAstronautStatus(ctx context.Context, in *UpdateAstronautStatusRequest, opts ...grpc.CallOption) (*UpdateAstronautStatusResponse, error)
}

type astronautServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAstronautServiceClient(cc grpc.ClientConnInterface) AstronautServiceClient {
	return &astronautServiceClient{cc}
}

func (c *astronautServiceClient) CreateAstronaut(ctx context.Context, in *CreateAstronautRequest, opts ...grpc.CallOption) (*CreateAstronautResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAstronautResponse)
	err := c.cc.Invoke(ctx, AstronautService_CreateAstronaut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *astronautServiceClient) GetAstronaut(ctx context.Context, in *GetAstronautRequest, opts ...grpc.CallOption) (*GetAstronautResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAstronautResponse)
	err := c.cc.Invoke(ctx, AstronautService_GetAstronaut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *astronautServiceClient) ListAstronauts(ctx context.Context, in *ListAstronautsRequest, opts ...grpc.CallOption) (*ListAstronautsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAstronautsResponse)
	err := c.cc.Invoke(ctx, AstronautService_ListAstronauts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *astronautServiceClient) UpdateAstronautStatus(ctx context.Context, in *UpdateAstronautStatusRequest, opts ...grpc.CallOption) (*UpdateAstronautStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAstronautStatusResponse)
	err := c.cc.Invoke(ctx, AstronautService_UpdateAstronautStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AstronautServiceServer is the server API for AstronautService service.
// All implementations must embed UnimplementedAstronautServiceServer
// for forward compatibility.
//
// Astronaut service definition
type AstronautServiceServer interface {
	CreateAstronaut(context.Context, *CreateAstronautRequest) (*CreateAstronautResponse, error)
	GetAstronaut(context.Context, *GetAstronautRequest) (*GetAstronautResponse, error)
	ListAstronauts(context.Context, *ListAstronautsRequest) (*ListAstronautsResponse, error)
	UpdateAstronautStatus(context.Context, *UpdateAstronautStatusRequest) (*UpdateAstronautStatusResponse, error)
	mustEmbedUnimplementedAstronautServiceServer()
}

// UnimplementedAstronautServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAstronautServiceServer struct{}

func (UnimplementedAstronautServiceServer) CreateAstronaut(context.Context, *CreateAstronautRequest) (*CreateAstronautResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAstronaut not implemented")
}
func (UnimplementedAstronautServiceServer) GetAstronaut(context.Context, *GetAstronautRequest) (*GetAstronautResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAstronaut not implemented")
}
func (UnimplementedAstronautServiceServer) ListAstronauts(context.Context, *ListAstronautsRequest) (*ListAstronautsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAstronauts not implemented")
}
func (UnimplementedAstronautServiceServer) UpdateAstronautStatus(context.Context, *UpdateAstronautStatusRequest) (*UpdateAstronautStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAstronautStatus not implemented")
}
func (UnimplementedAstronautServiceServer) mustEmbedUnimplementedAstronautServiceServer() {}
func (UnimplementedAstronautServiceServer) testEmbeddedByValue()                          {}

// UnsafeAstronautServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AstronautServiceServer will
// result in compilation errors.
type UnsafeAstronautServiceServer interface {
	mustEmbedUnimplementedAstronautServiceServer()
}

func RegisterAstronautServiceServer(s grpc.ServiceRegistrar, srv AstronautServiceServer) {
	// If the following call pancis, it indicates UnimplementedAstronautServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AstronautService_ServiceDesc, srv)
}

func _AstronautService_CreateAstronaut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAstronautRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AstronautServiceServer).CreateAstronaut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AstronautService_CreateAstronaut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AstronautServiceServer).CreateAstronaut(ctx, req.(*CreateAstronautRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AstronautService_GetAstronaut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAstronautRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AstronautServiceServer).GetAstronaut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AstronautService_GetAstronaut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AstronautServiceServer).GetAstronaut(ctx, req.(*GetAstronautRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AstronautService_ListAstronauts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAstronautsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AstronautServiceServer).ListAstronauts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AstronautService_ListAstronauts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AstronautServiceServer).ListAstronauts(ctx, req.(*ListAstronautsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AstronautService_UpdateAstronautStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAstronautStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AstronautServiceServer).UpdateAstronautStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AstronautService_UpdateAstronautStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AstronautServiceServer).UpdateAstronautStatus(ctx, req.(*UpdateAstronautStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AstronautService_ServiceDesc is the grpc.ServiceDesc for AstronautService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AstronautService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "astronaut.AstronautService",
	HandlerType: (*AstronautServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAstronaut",
			Handler:    _AstronautService_CreateAstronaut_Handler,
		},
		{
			MethodName: "GetAstronaut",
			Handler:    _AstronautService_GetAstronaut_Handler,
		},
		{
			MethodName: "ListAstronauts",
			Handler:    _AstronautService_ListAstronauts_Handler,
		},
		{
			MethodName: "UpdateAstronautStatus",
			Handler:    _AstronautService_UpdateAstronautStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/protos/astronaut.proto",
}
